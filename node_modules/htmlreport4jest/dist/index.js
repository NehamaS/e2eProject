"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fs = require("fs");
function mkdirs(dirpath) {
    if (!fs.existsSync(path.dirname(dirpath))) {
        mkdirs(path.dirname(dirpath));
    }
    fs.mkdirSync(dirpath);
}
var HTMLReport4Jest = /** @class */ (function () {
    function HTMLReport4Jest(globalConfig, options) {
        this._globalConfig = globalConfig;
        this._options = options;
    }
    HTMLReport4Jest.prototype.onRunComplete = function (context, result) {
        result.endTime = Date.now();
        result.reporterOptions = __assign({}, this._options);
        var data = JSON.stringify(result);
        var templatePath = path.resolve(__dirname, './index.html');
        var htmlTemplate = fs.readFileSync(templatePath, 'utf-8');
        result.reporterOptions.title = result.reporterOptions.title
            ? result.reporterOptions.title
            : 'Jest Html Report';
        var outputContext = htmlTemplate
            .replace('%RESULTDATA%', data)
            .replace('%TITLE%', result.reporterOptions.title);
        var publicPath = result.reporterOptions.reportPath
            ? result.reporterOptions.reportPath
            : './temp/';
        var filename = result.reporterOptions.reportFileName
            ? result.reporterOptions.reportFileName
            : 'result.html';
        fs.existsSync(publicPath) === false && publicPath && mkdirs(publicPath);
        fs.writeFileSync(publicPath.concat(filename), outputContext, 'utf-8');
    };
    return HTMLReport4Jest;
}());
module.exports = HTMLReport4Jest;
//# sourceMappingURL=index.js.map