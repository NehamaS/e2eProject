"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.splat = void 0;
const winston_1 = require("winston");
exports.splat = winston_1.format((info) => {
    const metadata = [];
    const messege = info.message;
    if (info.level === 'error') {
        if (typeof info.message === 'object') {
            if (messege !== null && messege.stack) {
                info.message = messege.stack.toString();
            }
        }
    }
    let splat = info[Symbol.for('splat')];
    if (splat) {
        const params = splat.length - 1;
        const loggerMethod = (typeof splat[params] === 'string') ? splat[params] : 'console';
        if (loggerMethod === 'queue') {
            const found = splat.find((item) => item.stack && item.stack.filename);
            if (found) {
                info.stack = found.stack;
            }
        }
    }
    if (typeof info.message === 'string' && info.message.match(/%s|%d|%j/)) {
        const splatFormat = winston_1.format.splat();
        let splat = info[Symbol.for('splat')];
        if (splat) {
            Array.from(splat).forEach((item) => {
                if (item && typeof item !== null) {
                    if (!item.loggerMethod && !item.stack) {
                        metadata.push(item);
                    }
                }
            });
        }
        if (!info.message.includes('%j')) {
            info.metadata = metadata;
        }
        const splatInfo = splatFormat.transform({
            level: info.level,
            message: info.message,
            splat
        });
        if (splatInfo && splatInfo.message) {
            info.message = splatInfo.message;
        }
    }
    else {
        if (splat) {
            Array.from(splat).forEach((item) => {
                if (item && typeof item !== null && typeof item !== 'function') {
                    if (!item.loggerMethod && !item.stack) {
                        if (item !== 'queue') {
                            metadata.push(item);
                        }
                    }
                }
            });
            info.metadata = metadata;
        }
    }
    return info;
});
