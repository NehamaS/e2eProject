"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.winstonTransports = void 0;
const transports_1 = __importStar(require("winston/lib/winston/transports"));
const disabled_1 = require("./disabled");
const NATSTransport_1 = require("./NATSTransport");
const winstonTransports = (config, container_id, container_name) => {
    const loggerMethod = process.env.LOGGER_METHOD || config.loggerMethod;
    const transportList = [];
    if (config.transport) {
        transportList.push(config.transport);
        return transportList;
    }
    if (loggerMethod === 'console') {
        transportList.push(new transports_1.default.Console);
        return transportList;
    }
    if (loggerMethod === 'disabled') {
        transportList.push(new disabled_1.Disabled);
        return transportList;
    }
    transportList.push(new transports_1.default.Console);
    if (config.nat.enabled) {
        transportList.push(new NATSTransport_1.NATSTransport({
            servers: config.nat.servers,
            container_id: container_id,
            container_name: container_name,
            level: config.level
        }));
    }
    if (config.file.enabled) {
        if (config.file.rotate.enabled) {
            transportList.push(new transports_1.DailyRotateFile(config.file.rotate));
        }
        else {
            transportList.push(new transports_1.default.File({
                filename: config.file.filename,
                level: config.level
            }));
        }
    }
    return transportList;
};
exports.winstonTransports = winstonTransports;
