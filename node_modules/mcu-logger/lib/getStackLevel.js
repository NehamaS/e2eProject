"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require('stackup');
const callsites_1 = __importDefault(require("callsites"));
const path_1 = __importDefault(require("path"));
const moment_1 = __importDefault(require("moment"));
const level = {
    level: 12,
    get() {
        const timestamp = moment_1.default().format('YYYY-MM-DD hh:mm:ss:SSS');
        let stack = callsites_1.default()[this.level];
        if (stack) {
            let filename = stack.getFileName();
            if (filename && filename.indexOf('logger.js') !== -1) {
                stack = callsites_1.default()[this.level + 1];
            }
        }
        return this.parse(stack, timestamp);
    },
    parse(stack, timestamp) {
        if (stack) {
            let filename = stack.getFileName();
            if (filename) {
                if (filename.indexOf("node_modules") === -1) {
                    const filepath = filename.split(path_1.default.sep);
                    filename = `${filepath[filepath.length - 2]}${path_1.default.sep}${filepath[filepath.length - 1]}`;
                }
                else {
                    filename = filename.substr(filename.indexOf('node_modules') - 1, filename.length);
                }
            }
            const line = stack.getLineNumber();
            const methodName = stack.getMethodName();
            const functionName = stack.getFunctionName();
            const method = functionName || methodName || '';
            return { filename, line, method, timestamp };
        }
        else {
            return {};
        }
    },
    set(level) {
        this.level = level;
    }
};
exports.default = level;
