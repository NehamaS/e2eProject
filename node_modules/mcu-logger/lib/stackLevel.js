"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require('stackup');
const path_1 = __importDefault(require("path"));
const moment_1 = __importDefault(require("moment"));
const UNKNOWN_FUNCTION = '<unknown>';
const level = {
    level: 14,
    parseNode(line) {
        const nodeRe = /^\s*at (?:((?:\[object object\])?[^\\/]+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i;
        const parts = nodeRe.exec(line);
        if (!parts) {
            return null;
        }
        const methodName = parts[1] || UNKNOWN_FUNCTION;
        return {
            file: parts[2],
            methodName: methodName.replace('Object.<anonymous>', ''),
            arguments: [],
            lineNumber: +parts[3],
            column: parts[4] ? +parts[4] : null,
        };
    },
    parse(stackString) {
        const lines = stackString.split('\n');
        return lines.reduce((stack, line) => {
            const parseResult = this.parseNode(line);
            if (parseResult) {
                stack.push(parseResult);
            }
            return stack;
        }, []);
    },
    get(loggerMethod) {
        const timestamp = moment_1.default().format('YYYY-MM-DD hh:mm:ss:SSS');
        const rawStack = new Error().stack;
        const parsedStack = this.parse(rawStack);
        let stack = (loggerMethod === 'queue') ? parsedStack[2] : parsedStack[this.level];
        if (!stack)
            return false;
        let filename = stack.file;
        if (filename && filename.indexOf('mculogger') !== -1) {
            stack = parsedStack[this.level + 1];
            if (!stack)
                return false;
        }
        if (filename && filename.indexOf('logger.js') !== -1) {
            stack = parsedStack[this.level + 1];
            if (!stack)
                return false;
        }
        filename = stack.file;
        const line = stack.lineNumber;
        const column = stack.column;
        const method = stack.methodName;
        // shorten filename by root directory or node_modules
        if (filename && typeof require !== 'undefined' && typeof require.main !== 'undefined') {
            filename = filename.replace(`${path_1.default.dirname(require.main.filename)}${path_1.default.sep}`, '');
        }
        return { filename, line, method, column };
    },
    set(level) {
        this.level = level;
    }
};
exports.default = level;
