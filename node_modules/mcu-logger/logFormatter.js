"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.devFormatter = exports.logFormatter = void 0;
const winston_1 = require("winston");
const getStackLevel_1 = __importDefault(require("./getStackLevel"));
const path_1 = __importDefault(require("path"));
let start;
const elapsed_time = function (note) {
    var precision = 3; // 3 decimal places
    var elapsed = process.hrtime(start)[1] / 1000000; // divide by a million to get nano to milli
    console.log(process.hrtime(start)[0] + " s, " + elapsed.toFixed(precision) + " ms - " + note); // print message + time
    start = process.hrtime(); // reset the timer
};
exports.logFormatter = winston_1.format((info, options) => {
    //start = process.hrtime();
    let stack = getStackLevel_1.default.get();
    if (stack) {
        let filename = stack.getFileName();
        const appDir = path_1.default.dirname(require.main.filename);
        if (filename && filename.indexOf("node_modules") === -1) {
            filename = filename.replace(`${appDir}${path_1.default.sep}`, '');
        }
        info.file = filename;
        info.line = stack.getLineNumber();
        const methodName = stack.getMethodName();
        const functionName = stack.getFunctionName();
        if (functionName) {
            info.functionName = functionName;
        }
        if (methodName && methodName !== functionName) {
            info.methodName = methodName;
        }
    }
    //elapsed_time("log formatting");
    return info;
});
exports.devFormatter = winston_1.format.printf(({ level, message, label, timestamp, metadata }) => {
    let stack = getStackLevel_1.default.get();
    if (stack) {
        let filename = stack.getFileName();
        const appDir = path_1.default.dirname(require.main.filename);
        if (filename.indexOf("node_modules") === -1) {
            filename = filename.replace(`${appDir}${path_1.default.sep}`, '');
        }
        const methodName = stack.getMethodName();
        const functionName = stack.getFunctionName();
        let method = '';
        if (methodName) {
            method = methodName;
        }
        if (functionName) {
            method = functionName;
        }
        try {
            message = (typeof message === 'object') ? JSON.stringify(message) : message;
            const jsonmeta = (Object.keys(metadata).length !== 0) ? JSON.stringify(metadata) : '';
            return `${timestamp} ${level}: ${message} ${jsonmeta} ${method} ${stack.getLineNumber()} ${filename}`;
        }
        catch (e) {
            return `${timestamp} ${level}: ${message} ${method} ${stack.getLineNumber()} ${filename}`;
        }
    }
    return `${timestamp} ${level}: ${message}`;
});
