"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NATSTransport = void 0;
const Transport = require("winston-transport");
const ts_nats_1 = require("ts-nats");
const flatbuffers = __importStar(require("./flatbuffers"));
const fs = __importStar(require("fs"));
const winston_1 = require("winston");
const os = __importStar(require("os"));
const defaults = {
    level: "info",
    format: winston_1.format.simple(),
    defaultChannel: "LOGS",
    pingInterval: 120000,
    preserveBuffers: true,
    json: false,
    maxPingOut: 2,
    maxReconnectAttempts: 10,
    reconnect: true,
    reconnectTimeWait: 2000,
    verbose: false,
    servers: ['nats://127.0.0.1:4222', 'tls://127.0.0.1:4443', 'nats://demo.nats.io:4222', 'tls://demo.nats.io:4443']
};
class NATSTransport extends Transport {
    constructor(opts) {
        super(opts);
        this.customLog = flatbuffers.compileSchema(fs.readFileSync(`${__dirname}/flatbuffers/log_schema.bfbs`));
        this.settings = Object.assign({}, defaults, opts);
        this.format = this.settings.format;
        this.level = this.settings.level;
        ts_nats_1.connect(this.settings)
            .then((nc) => {
            console.log("nats connected");
            this.client = nc;
        })
            .catch((err) => {
            console.error('nats connection failed', err);
        });
    }
    changeChannel(channel) {
        this.settings.defaultChannel = channel;
    }
    changeLogLevel(level) {
        this.settings.level = level;
        this.level = this.settings.level;
    }
    log(info, callback) {
        setImmediate(() => {
            this.emit('logged', info);
        });
        if (this.client) {
            try {
                if (fs.existsSync('/data/poduuid')) {
                    info.POD_UUID = fs.readFileSync("/data/poduuid", "utf-8").split("\n")[0];
                }
                info.HOSTNAME = os.hostname();
                if (fs.existsSync('/data/labels')) {
                    const labels = fs.readFileSync("/data/labels", "utf-8");
                    let resp = {};
                    labels.split("\n").forEach(label => {
                        const tinfo = label.split("=");
                        if (tinfo[1]) {
                            resp[tinfo[0]] = tinfo[1].replace(/"/g, "");
                        }
                    });
                    if (resp.cnfcuuid) {
                        info.CNCF_UUID = resp.cnfcuuid;
                    }
                    if (resp.type) {
                        info.PRODUCT_TYPE = resp.type;
                    }
                    else if (resp.mavrole && resp.app) {
                        info.PRODUCT_TYPE = `${resp.mavrole}/${resp.app}`;
                    }
                }
            }
            catch (err) {
                console.error(err);
            }
            const generatedBuffer = this.customLog.generate({
                container_id: this.settings.container_id,
                container_name: this.settings.container_name,
                payload: info
            });
            this.client.publish(this.settings.defaultChannel, generatedBuffer);
        }
        callback();
    }
    close() {
        this.client.close();
    }
}
exports.NATSTransport = NATSTransport;
