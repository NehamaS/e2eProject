"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const ts_nats_1 = require("ts-nats");
const flatbuffers = __importStar(require("./flatbuffers"));
const fs = __importStar(require("fs"));
const customLog = flatbuffers.compileSchema(fs.readFileSync(`${__dirname}/flatbuffers/log_schema.bfbs`));
const defaults = {
    level: "info",
    defaultChannel: "log",
    pingInterval: 120000,
    preserveBuffers: true,
    json: false,
    maxPingOut: 2,
    maxReconnectAttempts: 10,
    reconnect: true,
    reconnectTimeWait: 2000,
    verbose: false,
    servers: ['nats://127.0.0.1:6060']
};
ts_nats_1.connect(defaults)
    .then((nc) => {
    console.log("nats connected");
    const generatedBuffer = customLog.generate({
        container_id: "5c864f4dd4",
        container_name: "5c864f4dd4",
        payload: JSON.stringify({ timestamp: "2020-10-01 11:37:28.600591", message: "test" })
    });
    nc.publish("test", generatedBuffer);
})
    .catch((err) => {
    console.error('nats connection failed', err);
});
